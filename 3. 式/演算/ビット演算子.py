# ****** オペランド同士の演算 ******

dummy = 0
'''
+-------+-------+--------------------------+-------------------+
| 入力1 | 入力2 | 論理積(AND) | 論理和(OR) | 排他的論理和(XOR) |
+-------+-------+-------------+------------+-------------------+
|   1   |   1   |      1      |      1     |         0         |
|   1   |   0   |      0      |      1     |         1         |
|   0   |   1   |      0      |      1     |         1         |
|   0   |   0   |      0      |      0     |         0         |
+-------+-------+-------------+------------+-------------------+
'''

# === 論理積（AND）: '&'演算子 ===

x = 9
y = 10

print(x & y)
print(bin(x & y))

# === 論理和（OR）: '|'演算子 ===

print(x | y)
print(bin(x | y))

# === 排他的論理和（XOR）: '^'演算子 ===

print(x ^ y)
print(bin(x ^ y))

# === 負の整数に対するビット演算 ===

負の整数に対してビット演算を行うと、値が2の補数形式で表現されているものとして処理される。

ただし、負の整数をbin()やformat()などで2進数の文字列に変換すると、2の補数形式ではなく絶対値にマイナス符号が付いた形になるので注意が必要。

2の補数表現の文字列を取得したい場合は、4bitなら0b1111（=0xf）、8bitなら0xff、16bitなら0xffffのように、必要なビット桁数の最大値とのANDを取る。

2の補数表現（各ビットを反転させて1を加える）の文字列が取得できる。

x = -9

print(x)
print(bin(x))
# -9
# -0b1001

print(bin(x & 0xff))
print(format(x & 0xffff, 'x'))
# 0b11110111
# fff7


関連記事: Pythonで2進数、8進数、16進数の数値・文字列を相互に変換

# === ビット反転: ~演算子 ===

~演算子によるビット反転の例。

ビット反転は、単純に各ビットを反転した値ではなく、^xは-(x+1)となる値を返す。

この値-(x+1)は入力値xを2の補数形式とみなして、すべてのビットを反転した値と等価。

上述のように、Pythonでは負の整数をbin()やformat()などで2進数の文字列に変換すると、2の補数形式ではなく絶対値にマイナス符号が付いた形になるので、~xをそのまま文字列に変換しても元の値のビットが反転した文字列にはならない。

x = 9  # 0b1001

print(~x)
print(bin(~x))
# -10
# -0b1010


AND演算を行い、2の補数表現の文字列にすると、元の値のビットが反転していることが分かる。

さらに、例えば4桁のビット列をそのまま反転したビット列（符号ビット省略）を取得する場合は、AND演算を行った値に対してformat()で'04b'のようにゼロ埋めする。

print(bin(~x & 0xff))
print(format(~x & 0b1111, '04b'))
# 0b11110110
# 0110

# === ビットシフト: <<演算子、>>演算子 ===

ビットシフト演算子<<, >>による、左ビットシフト、右ビットシフトの例。

x = 9  # 0b1001

print(x << 1)
print(bin(x << 1))
# 18
# 0b10010

print(x >> 1)
print(bin(x >> 1))
# 4
# 0b100


負の値に対しては符号ビットが拡張されてシフトされ、正負の符号は変わらない。負の値は左側にずっと1が並んでいるイメージ。

x = -9
print(bin(x))
print(bin(x & 0xff))
# -0b1001
# 0b11110111

print(x << 1)
print(bin(x << 1))
print(bin((x << 1) & 0xff))
# -18
# -0b10010
# 0b11101110

print(x >> 1)
print(bin(x >> 1))
print(bin((x >> 1) & 0xff))
# -5
# -0b101
# 0b11111011


数値で考えるとよく分からなくなるので、2の補数表現の文字列で考えたほうがいい。
