from user import print_err

# 1. 代入の基本

"""
・後で定義したデータを「参照」する為、代入が行われる
・変数に保存された「参照値」は`id()`関数で取得可能
"""

# 1.1. 変数に、データを代入

"""
左辺の「変数」には、定義した右辺のデータの格納場所「参照値」が保存される
"""

'後で呼び出す為、変数「a」に定義したデータ「1」を代入'
a = 1
'変数「a」に保存された「参照値」を取得'
print(id(a))
'変数「a」に保存された「参照値」が示すデータを参照'
print(a)

# 1.2. 変数に、既存の変数を代入

"""
左辺の変数に入るのは、右辺の変数が持つ「参照値」なので、
両変数共に同一のデータを参照する様になる
"""

a = 1
b = a
'同一のデータを参照しているか確認'
print(id(a) == id(b))  # -> True

# 2. 多重代入

# 2.1. 左辺の複数の変数に、同じデータを代入

"""
変数`a`, 変数`b` ともに`100`を代入
"""

a = b = 100
print(a)
print(b)
print()

# 2.2. 左辺の複数の変数に、まとめてデータを代入

"""
・左辺の変数の数と、右辺のデータの数が同じなる様にする
・データ型が異ってもＯＫ
"""

a, b, c = 0.1, 100, 'string'
print(a, b, c, sep=', ')  # -> 0.1, 100, string

# 2.3. 左辺の単一の変数に、右辺のデータをタプルの要素として代入

# (a) 複数要素のタプル

a = 0.1, 100, 'string'
print(a)  # -> (0.1, 100, 'string')

# (b) 単一要素のタプル

singleton = 'hello',
print(len(singleton))  # -> 1
print(singleton)  # -> ('hello',)
print()

# 2.4. 変数やリスト要素の入れ替え

# 2.4.1. 変数の入れ替え(交換)

# 変数2つ
a, b = 1, 2
a, b = b, a
print(a, b, sep=', ')  # -> 2, 1

# 変数3つ以上
a, b, c, d = 1, 2, 3, 4
a, b, c, d = b, c, d, a
print(a, b, c, d, sep=', ')  # -> 2, 3, 4, 1

# 2.4.2. リスト要素を入れ替え(並べ替え)

l = [0, 1, 2, 3, 4]
l[0], l[3] = l[3], l[0]
print(l)  # -> [3, 1, 2, 0, 4]
print()

# 3. アンパック代入

"""
・左辺に変数をカンマで区切って書き、
  右辺のリストやタプルの要素数が、左辺の変数の数と一致すると
  それぞれの変数に右辺のタプルやリストの要素が代入される
・右辺の入れ子のリスト・タプルはひとつの要素として代入される
・左辺の変数と右辺の要素数が一致していないとエラーになる
"""

# タプル
t = 0, 1, 2
a, b, c = t
print(a, b, c, sep=', ')  # -> 0, 1, 2

# リスト
l = [0, 1, 2]
a, b, c = l
print(a, b, c, sep=', ')  # -> 0, 1, 2
print()

# 3.1. ネストしたタプル・リストのアンパック

t = (0, 1, (2, 3, 4))

a, b, c = t
print(a, b, c, sep=', ')  # -> 0, 1, (2, 3, 4)

# 中身も展開したい場合は変数を()または[]で囲む
a, b, (c, d, e) = t
print(a, b, c, d, e, sep=', ')  # -> 0, 1, 2, 3, 4
print()

# 3.2. 左辺の変数の数と、右辺の要素数が不一致だとエラーになる

try:
    a, b = t
except Exception as e:
    print_err(e)  # -> ValueError: too many values to unpack (expected 2)

try:
    a, b, c, d = t
except Exception as e:
    print_err(e)  # -> ValueError: not enough values to unpack (expected 4, got 3)
print()

# 4. 左辺に`*`が付いた変数がある場合の代入

# (a) 左辺の変数の数が、右辺のデータ数より少ない場合

"""
・変数名に'*'をつけると、その変数にあまったデータがリストとしてまとめて代入される
・`*`がついていない変数に先頭と末尾から先にデータが代入される
・`*`の利用は一回のみ
"""

a, b, *c = 0, 1, 2, 3, 4
print(a, b, c, sep=', ')  # -> 0, 1, [2, 3, 4]

a, *b, c = 0, 1, 2, 3, 4
print(a, b, c, sep=', ')  # -> 0, [1, 2, 3], 4

*a, b, c = 0, 1, 2, 3, 4
print(a, b, c, sep=', ')  # -> [0, 1, 2], 3, 4

# (b) 左辺の変数の数と、右辺のデータ数が一致する 場合

"""`*`がついた変数に該当データがリストの要素として代入される"""

a, b, *c = 0, 1, 2
print(a, b, c, sep=', ')  # -> 0, 1, [2]

# (c) 変数の数が`*`の付いた変数を含めて、要素数+1 の場合

"""`*`がついた変数に空のリストが代入される"""

a, b, c, *d = 0, 1, 2
print(a, b, c, d, sep=', ')  # -> 0, 1, 2, []
print()

# 5. `_`という名の変数

"アンパック時、慣例的に、必要ない要素は`_`変数 に代入する"

t = (0, 1, 2)

a, b, _ = t
print(a, b, _, sep=', ')  # -> 0, 1, 2
a, *_ = t
print(a, _, sep=', ')  # -> 0, [1, 2]
print()
