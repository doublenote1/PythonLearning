dummy = 0

"""
・コピーする方法は、
  イミュータブルは「変数の代入」のみ、
  ミュータブルは「変数の代入」、「浅いコピー」、「深いコピー」がある
・変数を別の変数へ代入した場合、同一のオブジェクトへの参照がコピーされる
・それぞれの方法でコピーした後、
  一方のデータのイミュータブルの要素に対して行った変更の影響が他方に出るかが異なる
"""

# 1. 中身がイミュータブルの変数をコピー（変数の代入）

"""
・数値型・文字列型・タプル・ブール型・フローズンセット（イミュータブル）を格納する変数
  をコピーする方法は別の変数への代入のみ
・変数のコピー（代入）後、一方の変数のデータに対し変更を行うと、
  別の記憶場所に変更された結果として新たなオブジェクトが作られ、
  データを変更した変数にはそのオブジェクトへの参照が入れられ、
  もう一方の変数が参照しているオブジェクトに影響を及ぼさない
"""

'変数に変数を代入'
a = 0
b = a
print(id(a) == id(b))  # -> True
'一方の変数のデータを変更'
b += 100
print(a)  # -> 0
print(b)  # -> 100
print(id(a) == id(b))  # -> False
print()

# 2. 中身がミュータブルの変数をコピー

# 2.1. 変数を代入する方法

"""
・変数のコピー（代入）後、一方の変数そのものへの再定義（再代入）で
  もう一方の変数の要素が変更されることはないが、
  一方の変数のコレクション内の要素に対する様な変更を行うと、
  もう一方のデータも同様に変更される
"""

# (a) 変数`a`と変数`b`が連動しないケース

# ■ 変数の再定義

a = [1, [2], [3, [4]]]
b = a
print(id(a) == id(a))  # -> True

b = [5, [6], [7, [8]]]
print(a)  # -> [1, [2], [3, [4]]]
print(b)  # -> [5, [6], [7, [8]]]
print(id(a) == id(b))  # -> False
print()

# (b) 変数`a`と変数`b`が連動するケース

# ■ 変数の再定義以外

a = [1, [2], [3, [4]]]
b = a

b[0] = 5
b[1] = [6]
b[2] = [7, [8]]
b[1][0] = 6
b[2][0] = 7
b[2][1] = [8]
b[2][1][0] = 8
print(a)  # -> [5, [6], [7, [8]]]
print(b)  # -> [5, [6], [7, [8]]]
print(id(a) == id(b))  # -> True
print()

# 2.2. ミュータブルに対する「浅いコピー」

"""
・浅いコピーをした変数にはコピー元の変数が持つ参照でなく、
  新たに複製されたオブジェクトに対する参照が入る
・新たなオブジェクトの中の要素は元のオブジェクトのものを参照する
・その後、一方の変数の再定義や、
  一番上の要素（インデックス1個で表せる要素。例えば、`a[0]`など）
  を入れ替える事でもう一方の要素が変更されることはないが、
  それより深い部分の要素（インデックス２つ以上で表す要素。例えば、`a[0][0]`など）
  に対し変更を行うと、もう一方の変数の要素も同様に変更される
"""

a = [1, [2], [3, [4]]]

# スライス記法を使う場合
b = a[:]

# `copy`メソッドを使う場合
c = a.copy()

# `copy`メソッドを使う場合 2
import copy
d = copy.copy(a)

'全て別のオブジェクトを参照'
l = [id(a), id(b), id(c), id(d)]
print(len(l) == len(set(l)))  # -> True
print()

# (a) 変数`a`と変数`b`が連動しないケース

# ■ 変数の再定義

a = [1, [2], [3, [4]]]
b = a[:]
print(id(a) == id(b))  # -> False

b = [5, [6], [7, [8]]]
print(a)  # -> [1, [2], [3, [4]]]
print(b)  # -> [5, [6], [7, [8]]]
print()

# ■ リストの一番上の要素を変更

a = [1, [2], [3, [4]]]
b = a[:]

b[0] = 5
b[1] = [6]
b[2] = [7, [8]]
print(a)  # -> [1, [2], [3, [4]]]
print(b)  # -> [5, [6], [7, [8]]]
print()

# (b) 変数`a`と変数`b`が連動するケース

# ■ 深い部分の要素を変更

a = [1, [2], [3, [4]]]
b = a[:]

b[1][0] = 6
b[2][0] = 7
b[2][1] = [8]
b[2][1][0] = 8
print(a)  # -> [1, [6], [7, [8]]]
print(b)  # -> [1, [6], [7, [8]]]
print()

# 2.3. ミュータブルに対する「深いコピー」

"""
・深いコピーをした変数にはコピー元の変数が持つ参照でなく、
  新たに複製されたオブジェクトに対する参照が入る
・新たなオブジェクトの中の要素もその深さにかかわらず、
  全て別のオブジェクト参照するようになる
・その後、一方の変数のデータの更新でもう一方の変数のデータが変わることはない
"""

a = [1, [2], [3, [4]]]

import copy
b = copy.deepcopy(a)

print(id(a) == id(b))  # -> False
print()

# (a) 変数`a`と変数`b`が連動しないケース

"""連動する事はない"""

b = [5, [6], [7, [8]]]
b[0] = 5
b[1] = [6]
b[2] = [7, [8]]
b[1][0] = 6
b[2][0] = 7
b[2][1] = [8]
b[2][1][0] = 8
print(a)  # -> [1, [2], [3, [4]]]
print(b)  # -> [5, [6], [7, [8]]]
print()
